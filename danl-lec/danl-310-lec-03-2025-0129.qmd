---
title: Lecture 3
subtitle: Make a plot with `ggplot`
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: false
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2025-01-29
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```



# Make a plot with `ggplot`  {background-color="#1c4982"}


## Make a plot
### `ggplot` Themes

- Use `theme()` if you want to tweak the display of an existing theme.  

- The following lists basic `ggplot` themes:  

theme            | theme
-----------------|-----------------
theme_grey()     | theme_gray()
theme_bw()       | theme_linedraw()
theme_light()    | theme_dark()
theme_minimal()  | theme_classic()
theme_void()     | theme_test()



## Make a plot
### ggplot Themes

- `ggthemes` package provides the following themes:
  - `theme_economist()`, `theme_wsj()`, `theme_fivethirtyeight()`, `theme_gdocs()`, `theme_map()`


- `hrbrthemes` package provides the following themes:
  - `theme_ipsum()`, `theme_ipsum_rc()`, `theme_ft_rc()`, and more.
  
  

## Make a plot
### `gapminder` data

- The `gapminder` package include the `gapminder` data frame.

```{.r}
library(gapminder)
gapminder
skim(gapminder)

```




## Make a plot
### Mappings link data to things we see 
:::{.nonincremental}
- First, we tell the core `ggplot` function what our data is and what our aesthetic mapping is:
```{.r}
p <- ggplot(data = gapminder)
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))
```


- We can then add the geometric object (`geom_*()`) to the `ggplot()`.

```{.r}
p + geom_point() 
```


:::



## Make a plot

1. Tell the `ggplot()` function what our **tidy** data is. 
  - `ggplot(data = ...)`
2. Tell `ggplot()` what relationships we want to see.
  - The `ggplot(mapping = aes(...))` 
  - `p <- ggplot(data = ... , aes(...))`
3. Tell `ggplot()` how we want to see the relationships in our data.
  - Choose a `geom_*()`.
4. Layer on `geoms` as needed, by adding them to the `p` object one at a time.
5. Use additional functions to adjust scales, labels, tick marks, titles, etc.




## Make a plot
### Build your plots layer by layer

```{.r}
p + geom_point() + geom_smooth() 
p + geom_point() + geom_smooth(method = "lm") 
p + geom_point() +
    geom_smooth(method = "lm")
```


```{.r}
p + geom_point() +
    geom_smooth(method = "gam")
```



## Make a plot
### Mapping aesthetics vs setting them

:::{.nonincremental}
- In the following, we map `color` to `continent` in the `aes()` function:
```{.r}
p1 <-  ggplot(data = gapminder,
             mapping = aes(x = gdpPercap, y = lifeExp,
                           color = continent))
```

- We then add geoms.
```{.r}
p1 + geom_point() +
     geom_smooth(method = "lm") 
```


:::


## Make a plot
### Mapping aesthetics vs setting them

:::{.nonincremental}

- In the following, we map `color` to `"purple"` outside of the `aes()` function:

```{.r}
p2 <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap, y = lifeExp))
```

- We then add geoms, manually set aethetics, and then adjust scales.
```{.r}
p2 + geom_point(color = "purple") +
     geom_smooth(method = "lm")
```

:::


## Make a plot
### Mapping aesthetics vs setting them
:::{.nonincremental}


- Here are another exmaples that set aesthetic mapping manually outside `aes()` function and inside `geom_*()` function.
```{.r}
p <- ggplot(data = gapminder,
            mapping = aes(x = gdpPercap,
                          y = lifeExp))

p + geom_point(color = "purple") +
    geom_smooth(method = "loess") 

p + geom_point(alpha = 0.3) +
    geom_smooth(color = "orange", se = F, size = 8, method = "lm") 
```

:::

## Make a plot
### Mapping aesthetics vs setting them

:::{.nonincremental}

- Let's add `scale_*()` and `labs()` functions to `ggplot()`

```{.r}
p + geom_point(alpha = 0.3) +
    geom_smooth(method = "gam") +
    scale_x_log10(labels = scales::dollar) +
    labs(x = "GDP Per Capita", y = "Life Expectancy in Years",
         title = "Economic Growth and Life Expectancy",
         subtitle = "Data points are country-years",
         caption = "Source: Gapminder.")
```

- **Q**. Is it really the best way to display this country-year data? 
  - What are we gaining and losing by ignoring the temporal and country-level structure of the data? How could we do better? 

:::


## Make a plot
### Aesthetics can be mapped per geom

- We can have different aesthetic mappings across different geoms:
```{.r}
p <- ggplot(data = gapminder, 
            mapping = aes(x = gdpPercap, y = lifeExp))

p + geom_point(mapping = aes(color = continent)) +
    geom_smooth(method = "loess")  +
    scale_x_continuous(trans = scales::log_trans())  # natural log
```




## Make a plot
### Save your work

- We can use `ggsave()` to save ggplot output as a *.png or *.pdf file.
```{.r}
ggsave(filename = "my_figure.png")
```

- We can put our recent plot into an object called p_out and then tell `ggave()` that we want to save that object.

```{.r}
p_out <- p + geom_point() +
    geom_smooth(method = "loess") +
    scale_x_log10()
ggsave("my_figure.pdf", plot = p_out)
```



## Make a plot
### Save your work


- We can set the size of ggplot figue:

```{.r}
ggsave("lifexp_vs_gdp_gradient.pdf",
       plot = p_out, height = 8, width = 10, units = "in")
```





## Make a plot
### Work a little more with `gapminder` data

- What happens when you put the `geom_smooth()` function before `geom_point()` instead of after it? 
  - What does this tell you about how the plot is drawn? Think about how this might be useful when drawing plots.
  


## Make a plot
### Work a little more with `gapminder` data

- Change the mappings in the `aes()` function so that you plot Life Expectancy against population (`pop`) rather than per capita GDP. 
  - What does that look like? 
  - What does it tell you about the unit of observation in the dataset?
  



## Make a plot
### Work a little more with `gapminder` data
- What happens if you map color to `year` instead of `continent`? 
  - Is the result what you expected? 
  - Think about what class of object year is. 
  - Remember you can get a quick look at the top of the data, which includes some shorthand information on the class of each variable, by typing `gapminder`.
  - Instead of mapping `color = year`, what happens if you try `color = factor(year)`?



# Show the right number {background-color="#1c4982"}

## Show the right number
### Grouped data and the `group` aesthetic

- Let's get a line plot that draws the trajectory of life expectancy over time for each country in the `gapminder` data.frame. 

```{.r}
p <- ggplot(data = gapminder,
            mapping = aes( x = year,
                           y = gdpPercap ) )

p + geom_line() 
```

- What happened?

- `geom_line()` joins up all the lines for each particular year in the order they appear in the dataset.



## Show the right number
### Grouped data and the `group` aesthetic


- Without group related parameters, `ggplot()` does not know that the yearly observations in the data are grouped by country.

```{.r}
p <- ggplot(data = gapminder,
            mapping = aes( x = year,
                           y = gdpPercap ) )

p + geom_line( aes( group = country ) ) 
```




## Show the right number
### Grouped data and the `group` aesthetic


- The `group` aesthetic is usually only needed when the grouping information we need to tell `ggplot()` about is not built-in to the variables being mapped.

  - How about `color` aesthetic, instead of `group`?

```{.r}
p <- ggplot(data = gapminder,
            mapping = aes( x = year,
                           y = gdpPercap ) )

p + geom_line( aes( color = country ) ) 
```


## Show the right number
### Facet to make small multiples
- Making a “small multiple” plot by faceting data based on a caterigorical variable allows a lot of information to be presented compactly, and in a consistently comparable way. 
  - `facet_wrap( VAR1 ~ . )` or `facet_wrap( . ~ VAR1 )`
  - `facet_grid( VAR1 ~ . )`: row-wise split
  - `facet_grid( . ~ VAR1 )`: colum-wise split
  - `facet_grid( VAR1 ~ VAR2 )` 

```{.r}
p + geom_line( aes( group = country ) ) + 
  facet_wrap(~ continent)
```



## Show the right number
### Facet to make small multiples

- Let's have all the facetted plots in a single row:
```{.r}
p + geom_line(color="gray70", aes(group = country)) +
    geom_smooth(size = 1.1, method = "loess", se = FALSE) +
    facet_[?] +
    scale_y_log10(labels=scales::dollar) + 
    theme(axis.text.x = element_text(angle = 45),
          axis.title.x = element_text(margin = margin(t = 25))) +
    labs(x = "Year", y = "GDP per capita",
         title = "GDP per capita on Five Continents")
```



## Show the right number
### The 2016 General Social Survey data

- The `socviz` package includes the `gss_sm` data frame.
  - `gss_sm` is a dataset containing an extract from the 2016 General Social Survey.

```{.r}
install.packages("socviz")
library(socviz)
?gss_sm
glimpse(gss_sm)
skimr::skim(gss_sm)
gss_sm <- gss_sm
```



## Show the right number
### Facet to make small multiples

- Describe the relationship between the age of the respondent and the number of children they have using a scatterplot and a fitted curve.

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes( x = age, y = childs ))

p + [?](alpha = 0.2) +
    [?]() 
```



## Show the right number
### Facet to make small multiples

- Describe how the relationship between the age of the respondent and the number of children they have varies by `sex` and `race`.

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes( x = age, y = childs ))

p + geom_point(alpha = 0.2) +
    geom_smooth() +
    [?]
```




## Show the right number
### Facet to make small multiples

- The `facet_grid()` function is best used when you cross-classify some data by two categorical variables.

  - e.g., the relationship between the age and the number of children by sex and race


```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes( x = age, y = childs ))

p + geom_point(alpha = 0.2) +
    geom_smooth() +
    facet_grid(sex ~ race + degree)
```


---
## Show the right number
### Geoms can transform data

- Let's plot a bar char:

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = bigregion))
p + geom_bar()
```



## Show the right number
### Geoms can transform data

:::{}

- Where does count come from? 
  - Bar charts, histograms, and frequency polygons bin your data and then plot bin counts, the number of points that fall in each bin.
  - Smoothers fit a model to your data and then plot predictions from the model.
  - Boxplots compute a robust summary of the distribution and then display a specially formatted box.
  
:::




## Show the right number
### Geoms can transform data


- If we want a chart of relative frequencies rather than counts, we will need to get the `prop` statistic instead.

- Our call to statistic from the `aes()` function generically looks like this: `<mapping> = <..statistic..>`. 

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = bigregion))
p + geom_bar(mapping = aes(y = ..prop..))
```

- What happened?




## Show the right number
### Geoms can transform data

- We need to tell ggplot to ignore the x-categories when calculating denominator of the proportion, and use the total number observations instead.

  - To do so we specify `group = 1` inside the `aes()` call. 

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = bigregion))
p + geom_bar(mapping = aes(y = ..prop.., group = 1)) 
```



## Show the right number
### Geoms can transform data

- Let’s look at another question from the survey. The `gss_sm` data contains a religion variable derived from a question asking:

  - “What is your religious preference? Is it Protestant, Catholic, Jewish, some other religion, or no religion?”

```{.r}
table(gss_sm$religion)
```


## Show the right number
### Geoms can transform data

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = religion, color = religion))
p + geom_bar()
```

- If we map religion to `color`, only the border lines of the bars will be assigned colors, and the insides will remain gray.



## Show the right number
### Geoms can transform data

-  If the gray bars look boring and we want to fill them with color instead, we can map the religion variable to `fill` in addition to mapping it to `x`.

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = religion, fill = religion))
p + geom_bar() + guides( fill = "none" )
```

-  If we set `guides(fill = "none")`, the legend about the `fill` mapping is removed.



## Show the right number
### Frequency plots the slightly awkward way

- A more appropriate use of the `fill` aesthetic with `geom_bar()` is to cross-classify two categorical variables. 

  - The default output of such `geom_bar()` is a stacked bar chart, with counts on the y-axis.


```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = bigregion, fill = religion))
p + geom_bar(position = "fill")
```
- An alternative choice is to set the position argument to `"fill"`.
  - It is to compare proportions across groups.




## Show the right number
### Frequency plots the slightly awkward way

- We can use `position = "dodge"` to make the bars within each region of the country appear side by side.

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = bigregion, fill = religion))
p + geom_bar(position = "dodge",
             mapping = aes(y = ..prop..))

```

- What happened?


## Show the right number
### Frequency plots the slightly awkward way

- In this case we should consider grouping variable, `religion`, so we map `religion` to the `group` aesthetic.

```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = bigregion, fill = religion))
p + geom_bar(position = "dodge",
             mapping = aes(y = ..prop.., group = religion))
```



## Show the right number
### Frequency plots the slightly awkward way

- How can we have a proportional bar chart such that the sum of all bars in each bigregion is 1?

  - There are various ways to do so, and faceting is one of them.
  - The proportions are calculated within each panel, which is the breakdown we wanted.


```{.r}
p <- ggplot(data = gss_sm,
            mapping = aes(x = religion))
p + geom_bar(position = "dodge",
             mapping = aes(y = ..prop.., group = bigregion)) +
    facet_wrap(~ bigregion, ncol = 1)
```




## Show the right number
### Histograms and density plots

- ggplot comes with a dataset, `midwest`, containing information on counties in several midwestern states of the USA. 

```{.r}
?midwest
glimpse(midwest)
skim(midwest)
view(midwest)
```


## Show the right number
### Histograms and density plots

- By default, the `geom_histogram()` function will choose a bin size for us based on a rule of thumb.

```{.r}
p <- ggplot(data = midwest,
            mapping = aes(x = area))
p + geom_histogram()
```




## Show the right number
### Histograms and density plots

- When drawing histograms it is worth experimenting with `bins` and also optionally the `origin` of the x-axis. 
```{.r}
p <- ggplot(data = midwest,
            mapping = aes(x = area))
p + geom_histogram(bins = 10)
```

